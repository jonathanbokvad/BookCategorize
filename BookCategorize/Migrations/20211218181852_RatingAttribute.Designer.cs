// <auto-generated />
using System;
using BookCategorize.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookCategorize.Migrations
{
    [DbContext(typeof(BookDbContext))]
    [Migration("20211218181852_RatingAttribute")]
    partial class RatingAttribute
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookCategorize.Models.Imagelinks", b =>
                {
                    b.Property<string>("smallThumbnail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("smallThumbnail");

                    b.ToTable("Imagelinks");
                });

            modelBuilder.Entity("BookCategorize.Models.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SearchBookModelId")
                        .HasColumnType("int");

                    b.Property<string>("selfLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("volumeInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SearchBookModelId");

                    b.HasIndex("volumeInfoId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("BookCategorize.Models.SearchBookModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("totalItems")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("searchBookModels");
                });

            modelBuilder.Entity("BookCategorize.Models.Searches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TemporarySearch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Searches");
                });

            modelBuilder.Entity("BookCategorize.Models.Volumeinfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategorizeType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("authors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageLinkssmallThumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("previewLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publishedDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("imageLinkssmallThumbnail");

                    b.ToTable("Volumeinfo");
                });

            modelBuilder.Entity("BookCategorize.Models.Item", b =>
                {
                    b.HasOne("BookCategorize.Models.SearchBookModel", null)
                        .WithMany("items")
                        .HasForeignKey("SearchBookModelId");

                    b.HasOne("BookCategorize.Models.Volumeinfo", "volumeInfo")
                        .WithMany()
                        .HasForeignKey("volumeInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("volumeInfo");
                });

            modelBuilder.Entity("BookCategorize.Models.Volumeinfo", b =>
                {
                    b.HasOne("BookCategorize.Models.Imagelinks", "imageLinks")
                        .WithMany()
                        .HasForeignKey("imageLinkssmallThumbnail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("imageLinks");
                });

            modelBuilder.Entity("BookCategorize.Models.SearchBookModel", b =>
                {
                    b.Navigation("items");
                });
#pragma warning restore 612, 618
        }
    }
}
